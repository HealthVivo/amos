To run this example execute the commands:
>Mnimo -h
Unlike Minimus, Minimo integrates the toAmos step such that the input file can simply be a FASTA file.

> Minimo KVP40.fa -D MIN_LEN=40 -D MIN_IDENT=98 -D FASTA_EXP=1
When Minimo imports reads using toAmos, reads with identical identifiers ending in /1 or /2 will be automatically recognized as mate-pairs. While Minimus and Minimo do not use mate-pair information for the assembly, this will be essential for scaffolding. For the assembly part, we request here that reads overlap by at least 40 bp and be at least 96% identical in order to be placed inside the same contig. We also specify that contigs in the AMOS bank should be exported in a FASTA format. The ACE format, a widely used assembly format, is also available for downstream analysis with external programs.

At the end of the Minimo step, the following output files will be created:

KVP40-contigs.afg: Minimo assembly in AMOS format
KVP40-contigs.fa: Minimo assembly in FASTA format
KVP40-contigs.qual: Quality scores for the Minimo assembly.
NOTE: This single Minimo step could be replaced by the following AMOS commands:

> toAmos -s KVP40.fa -o KVP40.afg
> bank-transact -cf -m KVP40.afg -b KVP40.bnk
> hash-overlap -x 0.04 -o 40 -b KVP40.bnk
> tigger -b KVP40.bnk
> make-consensus -e 0.04 -o 40 -b KVP40.bnk
> bank2fasta -b KVP40.bnk > KVP40-contigs.fa
Many AMOS utilities, including Minimus and Minimo, are simply text files specifying the parameters for the individual commands within the assembly pipeline. These files can be easily modified in order to adapt them to specialized settings. To view the contents of Minimo, for example, simply type:

> more ‘which Minimo’
To evaluate the quality of the assembly one can compute the N50 measure, which represents the contig length, L, such that contigs equal or longer than L contain 50% of the bases in the genome. To calculate this and other assembly statistics, run:

> getN50 KVP40-contigs.fa
These numbers illustrate that the assembly is poor, given that there are still over 1000 contigs and that the N50 and average contig size are only twice the read length. This is most often the result of a combination of (a) unequal read coverage, (b) high repeat content, and (c) errors in the reads.

Decrease the minimum overlap similarity from 98% to 97% to try to assemble more reads that can contain sequencing errors.

> Minimo KVP40.fa -D MIN_LEN=40 -D MIN_IDENT=97 -D FASTA_EXP=1
> getN50 KVP40-contigs.fa
The assembly is now much less fragmented: the number of contigs has decreased by an order of magnitude and the N50 has increased by two orders of magnitude.

Increasing the minimum overlap length from 40 to 80 bp might resolve some small repeats and improve the assembly:

> Minimo KVP40.fa -D MIN_LEN=80 -D MIN_IDENT=97 -D FASTA_EXP=1
> getN50 KVP40-contigs.fa
An additional six contigs have been joined thanks to the increase in overlap length. So, via two simple parameter changes we have achieved an assembly with a few dozen contigs and N50 size > 27 kb. These unambiguous contigs (unitigs) will provide a useful starting point for scaffolding, as we will now describe.

Produce a bank for scaffolding using Bambus 2.

> bank-transact -cf -m KVP40-contigs.afg -b KVP40.bnk
> toAmos_new -b KVP40.bnk -m KVP40.mates
The parameter -cf indicates to forcefully create the bank if one with the same name already exists; -b specifies the bank directory and -m the AMOS input file.
The toAmos_new command adds mate information to the bank.

While there is a convenience script provided for scaffolding (goBambus2.py), we will proceed via the modules clk, Bundler, OrientContigs, bank2fasta, and printScaff. These modules irreversibly modify the bank. If you wish to create a backup of the current bank, do so before proceeding. First, create links between contigs and mate-pairs (or paired-end reads).

> clk -b KVP40.bnk
Bundle links into edges among connected contigs.

> Bundler -b KVP40.bnk
Find repetitive contigs and mark as repeats.

> MarkRepeats -b KVP40.bnk > repeats.out
Determine contig order and orientation.

> OrientContigs -b KVP40.bnk -noreduce
Extract FASTA-formatted contigs from bank.

> OutputResults -b KVP40.bnk -prefix phageScaff -bambus1
Output result files

> bank2fasta -b KVP40.bnk > phageScaff.contigs.fasta
Print scaffold sequence and statistics.

> printScaff -e phageScaff.evidence.xml -s phageScaff.out.xml -l phageScaff.library -f phageScaff.contigs.fasta -merge -o phageScaff
18.	
The pipeline has successfully finished. Now, to list the output files associated to the scaffold, use:

> ls phageScaff*
Here is a description of each of these output files:

phageScaff.agp: scaffolds generated by the OrientContigs programs in NCBI AGP format.
phageScaff.dot: scaffolds generated by the OrientContigs program in Graphviz dot format.
phageScaff.evidence.xml: XML representation of the linking evidence (library and read pairing information, and read placement within each contig; also see AMOS Web site).
phageScaff.library: mapping from library names (provided by the user) to internal AMOS identifiers.
phageScaff.out.xml: XML representation of scaffolds generated by the OrientContigs program.
phageScaff.fasta: FASTA file of the scaffolds, joined by N's.
phageScaff.stats: statistics on the scaffolds generated, including N50 and total span.

Bambus 2.0 reports the phage inside a single scaffold and the final genome size as 244,758 bp, while the actual genome size of bacteriophage KVP40 is 244,834 bp. There is a small gap of ~76 bp in the assembly that could likely be closed via manual inspection or alignment against a reference genome.

