runAmos - The AMOS pipeline executor


Brief Summary
=============

   Most modern assembly programs (such as Celera Assembler or Arachne)
consist of a series of modules, run in a pipeline fashion. The AMOS
package includes a generic pipeline executor, runAmos, that allows
users to define such pipelines. runAmos also includes several useful
features: logging of the outputs of the modules, ability to start/stop
at a specific point in the pipeline, as well as a mechanism for
verifying the presence of the required inputs and for cleaning up the
temporary files created during assembly.


Running
=======

  runAmos reads the commands specified in a configuration file and
executes them. The configuration file and output prefix are passed on
the command line to the runAmos command interpreter as follows:

`runAmos [options] -C <config> <prefix>'

The additional parameter <prefix> will be assigned to the PREFIX
variable made available to the commands within the configuration file.
In the event no config file (-C <config>) is specified, runAmos will
use the file specified in the environment variable AMOSCONF. This
variable may be set in `bash' with:
`export AMOSCONF=/home/user/myfavorite.acf'
  OR in `csh' with:
`setenv AMOSCONF /home/user/myfavorite.acf'

To view the available runAmos command line options, type `runAmos -h'.
The most important of these options being `-D <definition>', where
<definition> is of the form NAME=value, e.g. `-D TGT=target.afg'. This
allows the user to specify inputs to the pipeline by setting variables
similar to PREFIX. See pipeline documentation for which variables
should be defined on the command line.

As runAmos executes the steps defined in a configuration file, it
outputs to the screen the step number, the comment associated with
each step (if specified) as well as the time spent processing the
commands in the step. In addition, runAmos creates a log file named
<prefix>.runAmos.log which contains the output (both stderr and
stdout) of all commands run. If any of the steps fails, runAmos also
creates an error file named <prefix>.runAmos.error, indicating the
nature of the error, then exits with a code of 1.


Configuration
=============

  The configuration file consists of a mixture of variable
definitions, pipeline step definitions, and comments. Variables are
defined as follows:

`VARIABLE = 50'

All lines following this definition will recognize $(VARIABLE) and
replace all instances with the value assigned by the definition (50 in
this case). The special variable PREFIX is assigned to the value
provided on the command line as described in the above section. All
instances of $(PREFIX) in the config file will be evaluated as above.

  Two other special variables may be specified in the configuration
file: INPUTS, and OUTPUTS. These should contain the required inputs
and expected outputs for the programs in the pipeline. If the `-ocd'
option is provided, runAmos will exit with an error if any of the
files in the INPUTS variable is not present. If the `-clean' option is
provided, runAmos will remove any file in the current directory that
were created after the program was started and that is not specified
in the INPUTS or OUTPUTS variables. In addition, runAmos will preserve
any files starting with '.' (UNIX hidden files or directories), as
well as the configuration file itself and the log file. Please use the
`-clean' option with care. It is often the case that NFS mounted
volumes report a different time than the local machine thus causing
runAmos to either not remove any files or remove too many files. In
addition, files created by programs running in the same directory may
be inadvertently removed. In order to provide for a safe cleanup
mechanism runAmos provides an additional variable TEMPS. If `-clean' is
provided and TEMPS is defined, only the files specified in this
variable will be removed.

  Pipeline steps are defined in one of the following ways:

`10: runcommand $(PREFIX)'
  OR
`10:
runcommand1 $(PREFIX)
runcommand2 $(PREFIX)
.'

In both cases the step number (10) is specified followed by a
colon. In the first example the step consists of only one command. If
the colon is followed by an end-of-line character, the step will
consist of all the commands listed until a line consisting of a single
period. Note that step numbers must be strictly increasing within the
configuration file. runAmos will exit with an error otherwise. The
step numbers can be used as parameters to the `-s' and `-e' command
line options, to start or end the execution at a specific step number.

  Comments are also defined in two manners:

`# this is a simple comment'
  OR
`## this is a "step" comment'

In the first case, a line beginning with a single `#' character, the
entire line is ignored by runAmos. In the second case (line beginning
with two `#' characters), the line is output to the screen as the step
following it is being executed. This is useful to provide the user
with a some information about the commands being run.


Example
=======

   The `src/Pipeline' directory contains various AMOS configuration
files for different pipelines. Any of these would suffice as an
example of an AMOS config file (all files with .acf suffixes).


August 2004

